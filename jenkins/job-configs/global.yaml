# There is a junit JJB tag, but it doesn't handle the flaky-test-handler plugin or allow empty results option.
- publisher:
    name: junit-publisher-fully-specified
    publishers:
        - raw:
            xml: |
                <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.9">
                    <testResults>_artifacts/junit*.xml</testResults>
                    <keepLongStdio>true</keepLongStdio>
                    <testDataPublishers>
                        <de.esailors.jenkins.teststability.StabilityTestDataPublisher plugin="test-stability@1.0"/>
                        <com.google.jenkins.flakyTestHandler.plugin.JUnitFlakyTestDataPublisher plugin="flaky-test-handler@1.0.1"/>
                    </testDataPublishers>
                    <healthScaleFactor>100.0</healthScaleFactor>
                    <allowEmptyResults>{allow-empty-results}</allowEmptyResults>
                </hudson.tasks.junit.JUnitResultArchiver>
- publisher:
    name: junit-publisher
    publishers:
        - junit-publisher-fully-specified:
            allow-empty-results: false

# Implements Docker Build and Publish Plugin
# https://wiki.jenkins-ci.org/display/JENKINS/CloudBees+Docker+Build+and+Publish+plugin
# From the docs: 'This plugin provides the ability to build projects with a Dockerfile, and publish the resultant
# tagged image (repo) to the docker registry.'
#
# repoName: docker registry repo name to publish the image
# dockerfilePath: workspace relative path to the 'Dockerfile' to build
# tag: Tag to apply to the built image
# credentialsId: Jenkins 'Username with password' credentials ID (hex string) to authenticate to docker registry.
#                Found under http:<jenkinsurl>/credentials -> "Advanced"
- builder:
    name: docker-build-publish
    builders:
        - raw:
            xml: |
               <com.cloudbees.dockerpublish.DockerBuilder plugin="docker-build-publish@1.1">
                   <server plugin="docker-commons@1.2"/>
                   <registry plugin="docker-commons@1.2">
                       <credentialsId>{credentialsId}</credentialsId>
                   </registry>
                   <repoName>{repoName}</repoName>
                   <noCache>true</noCache>
                   <forcePull>true</forcePull>
                   <dockerfilePath>{dockerfilePath}</dockerfilePath>
                   <skipBuild>false</skipBuild>
                   <skipDecorate>false</skipDecorate>
                   <repoTag>{tag}</repoTag>
                   <skipPush>false</skipPush>
                   <createFingerprint>true</createFingerprint>
                   <skipTagLatest>true</skipTagLatest>
               </com.cloudbees.dockerpublish.DockerBuilder>
        - shell: |
           #!/bin/bash
           set -e
           set -x
           docker rmi -f {repoName}:{tag}

# Default email recipients are set in Jenkins global config
- defaults:
    name: global
    disable_job: false
    emails: ''
    cron-string: 'H/30 * * * *'  # Set a 30m floor to start jobs.
    sq-cron-string: 'H/5 * * * *'  # Lower floor to 5m for blocking jobs.
    # How long to wait after sending TERM to send KILL (minutes)
    kill-timeout: 15
    # Just to be safe, use the Jenkins timeout after a long time.
    # NOTE: this *must* be larger than recursive timeouts
    #       (like the /usr/bin/timeout command), or else the child
    #       timeouts will never fire.
    jenkins-timeout: 700
    # report-rc assumes that $rc is set to the exit status of the runner.
    report-rc: |
        if [[ ${{rc}} -eq 124 || ${{rc}} -eq 137 ]]; then
            echo "Build timed out" >&2
        elif [[ ${{rc}} -ne 0 ]]; then
            echo "Build failed" >&2
        fi
        echo "Exiting with code: ${{rc}}"
        exit ${{rc}}
    runner: bash <(curl -fsS --retry 3  "https://raw.githubusercontent.com/kubernetes/test-infra/master/jenkins/dockerized-e2e-runner.sh")
    legacy-runner: bash <(curl -fsS --retry 3  "https://raw.githubusercontent.com/kubernetes/test-infra/master/jenkins/e2e-image/e2e-runner.sh")
    post-env: |
        # Nothing should want Jenkins $HOME
        export HOME=${{WORKSPACE}}

        # Assume we're upping, testing, and downing a cluster
        export E2E_UP="${{E2E_UP:-true}}"
        export E2E_TEST="${{E2E_TEST:-true}}"
        export E2E_DOWN="${{E2E_DOWN:-true}}"

        # Skip gcloud update checking
        export CLOUDSDK_COMPONENT_MANAGER_DISABLE_UPDATE_CHECK=true
        # Use default component update behavior
        export CLOUDSDK_EXPERIMENTAL_FAST_COMPONENT_UPDATE=false

        # AWS variables
        export KUBE_AWS_INSTANCE_PREFIX="${{E2E_NAME:-jenkins-e2e}}"

        # GCE variables
        export INSTANCE_PREFIX="${{E2E_NAME:-jenkins-e2e}}"
        export KUBE_GCE_NETWORK="${{E2E_NAME:-jenkins-e2e}}"
        export KUBE_GCE_INSTANCE_PREFIX="${{E2E_NAME:-jenkins-e2e}}"

        # GKE variables
        export CLUSTER_NAME="${{E2E_NAME:-jenkins-e2e}}"
        export KUBE_GKE_NETWORK="${{E2E_NAME:-jenkins-e2e}}"

        # Get golang into our PATH so we can run e2e.go
        export PATH="${{PATH}}:/usr/local/go/bin"

        # e2e image tag overrider. default is using latest dated e2e-1.5
        export E2E_IMAGE_1.4_TAG="1.4-v20161101-c3cbd9d-dirty"
        export E2E_IMAGE_1.5_TAG="1.5-v20161101-c3cbd9d-dirty"
