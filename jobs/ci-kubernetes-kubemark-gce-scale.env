### job-env
E2E_NAME=kubemark-2000
PROJECT=kubernetes-scale
E2E_TEST=false
USE_KUBEMARK=true
KUBEMARK_TESTS=\[Feature:Performance\]
KUBEMARK_TEST_ARGS=--gather-resource-usage=true --garbage-collector-enabled=true --kube-api-content-type=application/vnd.kubernetes.protobuf
# Increase throughput in Kubemark master components.
KUBEMARK_MASTER_COMPONENTS_QPS_LIMITS=--kube-api-qps=100 --kube-api-burst=100
# Increase limit for inflight requests in apiserver (we do the same in production clusters).
TEST_CLUSTER_MAX_REQUESTS_INFLIGHT=--max-requests-inflight=1500 --max-mutating-requests-inflight=500
# Increase throughput in Load test.
LOAD_TEST_THROUGHPUT=25
# TODO: Temporarily disable services.
CREATE_SERVICES=false
# Override defaults to be independent from GCE defaults and set kubemark parameters
# We need 11 so that we won't hit max-pods limit (set to 100). TODO: do it in a nicer way.
NUM_NODES=60
MASTER_SIZE=n1-standard-4
# Note: can fit about ~10 hollow nodes per core so NUM_NODES x
# cores_per_node should be set accordingly.
NODE_SIZE=n1-standard-8
KUBEMARK_MASTER_SIZE=n1-standard-64
# Increase disk size to check if that helps for etcd latency.
MASTER_DISK_SIZE=100GB
KUBEMARK_NUM_NODES=5000
KUBE_GCE_ZONE=us-central1-b
# =========================================
# Configuration we are targetting in 1.6
TEST_CLUSTER_STORAGE_CONTENT_TYPE=--storage-media-type=application/vnd.kubernetes.protobuf
# The kubemark scripts build a Docker image
JENKINS_ENABLE_DOCKER_IN_DOCKER=y
KUBE_NODE_OS_DISTRIBUTION=gci

# TODO: revert after running experiments.
EVENT_PD=true
# TODO: Reduce this once we have log rotation in Kubemark.
KUBEMARK_MASTER_ROOT_DISK_SIZE=100GB

KUBEKINS_TIMEOUT=600m
